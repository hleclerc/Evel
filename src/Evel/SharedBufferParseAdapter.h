#pragma once

#include "Stream/SharedBuffer.h"

#define HPIPE_BUFFER Evel::SharedBuffer

namespace Evel {

/**
  T get a class like TlsConnection, TcpConnection, ... with a parse( buffer, last_buf, data = 0, end_m1 )

  enable notably direct use of code generated by hpipe
*/
template<class T>
class SharedBufferParseAdapter : public T {
public:
    using T::T;

protected:
    virtual unsigned parse( SharedBuffer *buf, bool last_buf, const unsigned char *data = 0, const unsigned char *end_m1 = 0 ) = 0;

private:
    virtual void parse( char **data, size_t size, size_t rese ) override {
        Evel::SharedBuffer *buf = new ( *data ) Evel::SharedBuffer( size, rese );
        parse( buf, false );
        if ( buf->cpt_use )
            *data = 0;
    }

    // because we want to allocate SharedBuffers
    virtual size_t offset_parse() const override {
        return sizeof( Evel::SharedBuffer ) - Evel::SharedBuffer::nb;
    }
};

} // namespace Evel
